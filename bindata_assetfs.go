// Code generated by go-bindata.
// sources:
// html/index.html
// html/rtt.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x55\xc1\x6e\xe3\x36\x10\x3d\x3b\x5f\x31\xf0\xd9\x12\xed\x00\x69\x52\x87\x16\xd0\xba\x6d\x5a\xa0\x41\x5a\x24\x0b\xec\x61\x2f\x34\x35\x92\x88\x50\x24\x97\xa4\x12\x1b\x8b\xfd\xf7\x1d\x8a\xb6\xb1\x9b\xd5\x69\xaf\xab\x83\x25\x3e\xcd\x90\xef\x3d\xcd\x8c\x79\x17\x7b\x5d\x5d\xf0\x0e\x45\x5d\x5d\x00\xf0\xa8\xa2\xc6\xea\xff\x77\xff\x6c\xe1\x0f\xec\x2d\x67\x19\x48\xaf\x42\x3c\xa4\xa7\xd9\x6c\x67\xeb\x03\x7c\xa2\x87\x59\x63\x4d\x2c\x1a\xd1\x2b\x7d\x58\x43\x10\x26\x14\x01\xbd\x6a\x6e\xd3\xbb\x5e\xf8\x56\x99\x35\xac\xb0\x4f\xeb\xcf\x17\xf4\x23\x6d\x8d\x39\xb3\x56\xc1\x69\x41\x59\x3b\x6d\xe5\xf3\x37\x09\x97\xe7\x04\xa0\xab\x1c\x82\x32\x2d\x25\xc1\x78\xbd\xaa\x3a\x76\x6b\xb8\x5a\x2e\xdd\xfe\xf6\x88\x75\xa8\xda\x2e\x1e\x13\x13\x70\x4a\xad\x49\xc1\xdb\xcc\xd5\x54\xe6\x11\x24\x12\x11\xf7\xb1\x10\x5a\xb5\x44\x44\xa2\x89\xe8\xcf\x5b\x26\xb9\x96\x80\x2c\x20\xb3\x2d\xa2\x75\x5f\x31\x26\x97\xd8\xd1\x26\xce\xb2\xa7\x3c\xb9\x45\xae\xf1\x6e\x95\x6d\x7d\xc2\x10\xe1\x3f\xd1\x22\x45\xac\xaa\xc4\x94\xab\xc6\x8b\x1e\x41\x6a\x11\xc2\x66\x3e\x0a\x9e\x43\xf0\x72\x33\x67\x79\x51\x71\x96\x63\x28\x7e\xc6\x5d\xfa\x08\x4f\x9d\x0a\xf0\x8a\x3b\x47\x3b\xc1\x10\x30\x80\x30\x80\x7b\x47\xfe\xf7\xc4\x5b\x68\xe0\x02\x3a\x8f\xcd\x66\xde\xc5\xe8\xc2\x9a\xb1\x56\xc5\x6e\xd8\x95\xd2\xf6\x4c\x0f\x52\x84\x42\x6a\x4c\xb1\xc8\x3e\x0e\x4a\x16\xad\x9d\x57\x77\x16\x54\xef\x32\xac\xac\xe1\x4c\x54\x60\x1b\x88\x1d\x82\xb1\x2f\x38\xb1\x29\x9a\xf2\x55\x3d\x2b\x87\xb5\x12\xa5\xf5\x2d\x4b\x2b\x96\x94\xce\xb3\x5e\xe7\x6d\xb4\xd2\xea\x71\x2f\x5a\x38\x1b\xb0\x86\xdd\x01\xee\xac\x6d\x35\x96\x24\x88\x25\x45\x47\x59\x36\x89\x01\x15\x17\x70\xb0\x03\x18\xa4\xd8\x98\x31\x01\x72\xf0\x9e\x88\xc1\xb6\xf3\x96\xfc\x7a\x41\x1f\x88\xe4\x82\x94\xd7\xa0\xc5\x60\x64\x47\x89\x90\x0b\x46\x40\x70\x28\x15\xf9\x40\x7a\xfb\x14\xd1\x50\xd2\xa8\x44\x5a\x13\x2c\x9d\x0c\x7f\x59\x0f\x0f\x8f\xf0\x7e\x01\xd1\x1f\xd6\x74\x3a\x4f\x05\x9a\x68\xcc\xd8\x6f\xce\x69\x25\x45\x72\x21\xb0\x4c\xf5\xc3\xf1\xe0\x52\x38\xc7\xb6\x54\xfa\xc4\x25\xb0\x7b\x21\x1f\x1e\xdf\x44\x00\x14\x05\x51\xf6\x45\x2d\xa2\x28\x6a\xe5\x37\x2c\xf6\x8e\xc9\xfc\xb2\x28\xac\x57\xb9\x78\x8a\xc6\x7a\x89\xc5\xe8\xbf\x35\x9b\x74\x2f\x4f\x5f\xa5\x54\x76\x7d\xbd\x5c\x2e\x17\xdf\xa1\x37\xcb\xe5\xd5\x24\xfa\xcb\x24\x7a\x3d\x89\xde\x4c\xa2\xbf\x12\x3b\x34\x62\xa7\x33\x29\x38\x7d\xe6\x49\x66\xc9\x31\x96\x2d\xa3\xc7\xe4\xa6\x56\x66\xd8\x4f\xd8\x29\x7f\x52\x5b\x72\x6d\xa7\x1e\xef\x2e\xab\x3f\xcf\xdd\x19\xa8\xf7\x2f\x33\x3e\xe8\x6a\x1c\x30\x5c\xab\xea\xdc\x5c\xcc\xc7\x58\xa6\xd1\x3c\xaf\x9e\xa8\x60\xb1\x69\x50\xc6\xd4\x88\xde\x0e\xa6\x2e\xa2\x57\x2e\xa4\x7e\xe2\x8c\xb2\xc6\xa9\x93\xb6\xa1\xd3\xf2\x84\x4a\x96\xf3\xce\xb3\x74\xff\x7d\x50\x3a\xa6\x76\xfb\x37\xb5\x3c\x6c\x8f\x5c\xc7\x9e\xb9\x17\x9e\x6a\x18\x1e\x11\xa9\x41\xa8\x8f\x02\xe2\x8f\x4d\x0d\x15\xff\x1e\x76\x89\xd0\xd8\xcd\x27\x12\x9c\xe5\xd9\x47\x62\xc7\x7f\x99\x2f\x01\x00\x00\xff\xff\x8b\x55\x41\x01\x6d\x06\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 1645, mode: os.FileMode(436), modTime: time.Unix(1463073283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlRttHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\xb6\xbe\xb4\x41\x2a\x4b\x76\x92\x22\x75\x19\x5d\xd2\x43\x03\xf4\x90\x26\xea\x07\xd0\xe4\xca\x64\xc3\x87\x4a\xae\x90\x08\x45\xff\xbd\xd4\xc3\x85\x1b\x38\xe8\xc5\x3e\x89\x98\x21\x67\x67\x77\x28\x32\x45\xd6\x94\x27\x4c\x21\x97\xe5\x09\x00\x23\x4d\x06\xcb\x6f\xdf\x6f\x6f\xe0\x33\x5a\xcf\xf2\x11\xe8\xa9\x48\xdd\xb8\x02\x58\x7b\xd9\xc1\xaf\x61\x09\x50\x7b\x47\x59\xcd\xad\x36\xdd\x0a\x22\x77\x31\x8b\x18\x74\xfd\x69\xa2\x2d\x0f\x1b\xed\x56\xb0\x40\x3b\x42\xbf\x4f\x86\xcf\x5c\x26\xfd\xbf\x22\x4f\x5a\x92\x4a\x9b\x8a\xa2\x79\xde\x9e\x54\xa8\x37\x8a\x5e\x80\x84\xcf\x94\x71\xa3\x37\x49\x52\xa0\x23\x0c\x5b\xd5\x64\x31\x9f\x3c\xb2\x7c\x6c\x88\xf5\x46\x07\xf3\x6a\x59\x56\x0a\x01\xeb\x1a\x05\x81\xaf\xe1\xde\xb7\x4e\x66\x55\xd0\x4d\x56\x69\x8b\xf0\x8e\x42\x07\x01\x8d\xe7\x52\xbb\xcd\x9b\xd3\x24\xb1\x2c\x7b\xa7\xac\x19\x7b\x1e\x66\x52\x23\xa7\x36\x60\x04\x0e\xa2\x8d\xe4\x2d\x88\xd0\x35\xe4\x21\x12\x17\x8f\x40\x8a\x13\xe8\xc4\xae\x0d\x42\x42\x31\xc1\x6b\xa3\xa3\x02\xe1\x9d\x4b\x95\xb5\x77\x11\xb4\x83\x22\x5b\xc0\x7d\x55\xc5\x39\x54\x37\x77\x67\xd5\xd7\x07\x68\x63\xcb\x8d\xe9\xc0\x21\xca\x08\xe7\xd9\xc5\xc4\xdf\xd6\x10\xbd\x45\x52\xc9\x15\x48\x8f\xd1\xbd\x25\x78\xf2\xe1\xf1\x3d\xfc\x48\x0e\xe0\x1f\xdb\xb0\x3a\x1d\xc6\xd0\x8c\xce\xfb\xe2\x53\x62\x8c\x42\x39\x4d\x90\x91\x2a\x1f\xb4\x6d\x0d\x27\x94\x7d\x95\x14\xb2\xda\x25\x0b\xb0\xf1\x25\x96\x32\xd8\x83\x5e\xee\x45\x17\xb0\x03\xa5\x55\xd8\x63\x41\x96\x53\xe3\x67\x5f\xaa\xea\x6e\x99\x76\xc9\x5d\x92\xe9\x3a\xf0\x94\x8a\x30\x3c\xc6\xeb\x59\x7f\x55\x66\x10\x83\xb8\x9e\x29\xa2\x26\xae\xf2\xfc\x67\xab\xc5\x5c\x18\xb4\xfd\x1d\x98\x6b\xbf\xba\x2a\x8a\x22\xa7\x34\xf1\x59\xc9\xf2\xf1\x78\x79\x18\xd9\xc5\x71\x64\xcf\x8f\x23\x7b\xf1\xba\xec\xab\x59\xf4\x77\xfb\x30\xd5\x2f\x87\xea\x59\x4f\x1d\xbc\xb3\x0f\x47\xd4\xbe\x3a\xa2\xf6\xc7\xff\x68\xef\x89\x65\x0b\xa5\xef\xf8\x0f\xb3\x7c\x7c\xca\xd2\xb3\x34\xbc\xd8\x7f\x02\x00\x00\xff\xff\x97\x5a\x72\x17\xb9\x05\x00\x00")

func htmlRttHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlRttHtml,
		"html/rtt.html",
	)
}

func htmlRttHtml() (*asset, error) {
	bytes, err := htmlRttHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/rtt.html", size: 1465, mode: os.FileMode(420), modTime: time.Unix(1463073257, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
	"html/rtt.html": htmlRttHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"rtt.html": &bintree{htmlRttHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
