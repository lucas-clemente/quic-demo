// Code generated by go-bindata.
// sources:
// html/index.html
// html/rtt.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x55\xc1\x6e\xdb\x38\x10\x3d\x3b\x5f\x31\xf0\xd9\x12\xed\x6c\xb2\x9b\x75\x68\x01\xbb\xde\x6d\x5a\xa0\x41\x5a\x24\x05\x7a\xe8\x85\xa6\x46\x12\x11\x8a\x64\x49\x2a\xb1\x51\xf4\xdf\x3b\x14\x6d\xa3\x4d\x7d\xea\xb5\x3a\x58\xe2\xd3\x0c\xf9\xde\xd3\xcc\x98\x77\xb1\xd7\xd5\x19\xef\x50\xd4\xd5\x19\x00\x8f\x2a\x6a\xac\xde\x7f\x78\xb3\x86\xff\xb0\xb7\x9c\x65\x20\xbd\x0a\x71\x97\x9e\x26\x93\x8d\xad\x77\xf0\x85\x1e\x26\x8d\x35\xb1\x68\x44\xaf\xf4\x6e\x09\x41\x98\x50\x04\xf4\xaa\xb9\x4e\xef\x7a\xe1\x5b\x65\x96\xb0\xc0\x3e\xad\xbf\x9e\xd1\x8f\xb4\x35\xe6\xcc\x5a\x05\xa7\x05\x65\x6d\xb4\x95\x8f\x3f\x24\x9c\x1f\x13\x80\xae\x72\x08\xca\xb4\x94\x04\xe3\xf5\xac\xea\xd8\x2d\xe1\x72\x3e\x77\xdb\xeb\x3d\xd6\xa1\x6a\xbb\xb8\x4f\x4c\xc0\x21\xb5\x26\x05\x2f\x33\x17\xa7\x32\xf7\x20\x91\x88\xb8\x8d\x85\xd0\xaa\x25\x22\x12\x4d\x44\x7f\xdc\x32\xc9\xb5\x04\x64\x01\x99\x6d\x11\xad\xfb\x8e\x31\xb9\xc4\xf6\x36\x71\x96\x3d\xe5\xc9\x2d\x72\x8d\x77\x8b\x6c\xeb\x03\x86\x08\xef\x44\x8b\x14\xb1\xa8\x12\x53\xae\x1a\x2f\x7a\x04\xa9\x45\x08\xab\xe9\x28\x78\x0a\xc1\xcb\xd5\x94\xe5\x45\xc5\x59\x8e\xa1\xf8\x09\x77\xe9\x23\x3c\x74\x2a\xc0\x33\x6e\x1c\xed\x04\x43\xc0\x00\xc2\x00\x6e\x1d\xf9\xdf\x13\x6f\xa1\x81\x0b\xe8\x3c\x36\xab\x69\x17\xa3\x0b\x4b\xc6\x5a\x15\xbb\x61\x53\x4a\xdb\x33\x3d\x48\x11\x0a\xa9\x31\xc5\x22\xfb\x3c\x28\x59\xb4\x76\x5a\xdd\x58\x50\xbd\xcb\xb0\xb2\x86\x33\x51\x81\x6d\x20\x76\x08\xc6\x3e\xe1\x89\x4d\xd1\x94\xcf\xea\x51\x39\xac\x95\x28\xad\x6f\x59\x5a\xb1\xa4\x74\x9a\xf5\x3a\x6f\xa3\x95\x56\x8f\x7b\xd1\xc2\xd9\x80\x35\x6c\x76\x70\x63\x6d\xab\xb1\x24\x41\x2c\x29\xda\xcb\xb2\x49\x0c\xa8\x38\x83\x9d\x1d\xc0\x20\xc5\xc6\x8c\x09\x90\x83\xf7\x44\x0c\xd6\x9d\xb7\xe4\xd7\x13\xfa\x40\x24\x67\xa4\xbc\x06\x2d\x06\x23\x3b\x4a\x84\x5c\x30\x02\x82\x43\xa9\xc8\x07\xd2\xdb\xa7\x88\x86\x92\x46\x25\xd2\x9a\x60\xe9\x64\x78\x65\x3d\xdc\xdd\xc3\xc7\x19\x44\xbf\x5b\xd2\xe9\x3c\x15\x68\xa2\x31\x61\xff\x38\xa7\x95\x14\xc9\x85\xc0\x32\xd5\x4f\xfb\x83\x4b\xe1\x1c\x5b\x53\xe9\x13\x97\xc0\x6e\x85\xbc\xbb\x7f\x11\x01\x50\x14\x44\xd9\x17\xb5\x88\xa2\xa8\x95\x5f\xb1\xd8\x3b\x26\xf3\xcb\xa2\xb0\x5e\xe5\xe2\x29\x1a\xeb\x25\x16\xa3\xff\xd6\xac\xd2\xbd\x3c\x7c\x95\x52\xd9\xe5\xc5\xc5\x1f\xb3\x9f\xc0\xab\xf9\xfc\xf2\x24\xfa\xe7\x49\xf4\xaf\x93\xe8\xd5\x49\xf4\x6f\x22\x87\x46\x6c\x74\xe6\x04\x87\xaf\xfc\x32\x36\x79\xc5\xb2\x59\xf4\x98\x7c\xd4\xca\x0c\xdb\x13\x46\xca\xdf\xce\x90\x5c\xcf\xa9\xaf\xbb\xf3\xea\xff\x63\x47\x06\xea\xf7\xf3\x8c\x0f\xba\x1a\x87\x0a\xd7\xaa\x3a\x36\x14\xf3\x31\x96\x69\x1c\x4f\xab\x07\x2a\x52\x6c\x1a\x94\x31\x35\x9f\xb7\x83\xa9\x8b\xe8\x95\x0b\xa9\x87\x38\xa3\xac\x71\xd2\xa4\x6d\xe8\xb4\x3c\x95\x92\xd9\xbc\xf3\x2c\xdd\xff\x1d\x94\x8e\xa9\xc5\xde\xa6\x36\x87\xf5\x9e\xe6\xd8\x27\xb7\xc2\x53\xdd\xc2\x3d\x22\x35\x05\xf5\x4e\x40\xfc\xb5\x49\xa1\xe2\xeb\x61\x93\x08\x8d\x1d\x7c\x20\xc1\x59\x9e\x77\x24\x76\xfc\x67\xf9\x16\x00\x00\xff\xff\x81\xeb\x07\xd0\x61\x06\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 1633, mode: os.FileMode(436), modTime: time.Unix(1463074166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlRttHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\xb6\xbe\xb4\x41\x2a\x4b\x76\x92\x22\x75\x19\x5d\xd2\x43\x03\xf4\x90\x26\xea\x07\xd0\xe4\xca\x64\xc3\x87\x4a\xae\x90\x08\x45\xff\xbd\xd4\xc3\x85\x1b\x38\xe8\xc5\x3e\x89\x98\x21\x67\x67\x77\x28\x32\x45\xd6\x94\x27\x4c\x21\x97\xe5\x09\x00\x23\x4d\x06\xcb\x6f\xdf\x6f\x6f\xe0\x33\x5a\xcf\xf2\x11\xe8\xa9\x48\xdd\xb8\x02\x58\x7b\xd9\xc1\xaf\x61\x09\x50\x7b\x47\x59\xcd\xad\x36\xdd\x0a\x22\x77\x31\x8b\x18\x74\xfd\x69\xa2\x2d\x0f\x1b\xed\x56\xb0\x40\x3b\x42\xbf\x4f\x86\xcf\x5c\x26\xfd\xbf\x22\x4f\x5a\x92\x4a\x9b\x8a\xa2\x79\xde\x9e\x54\xa8\x37\x8a\x5e\x80\x84\xcf\x94\x71\xa3\x37\x49\x52\xa0\x23\x0c\x5b\xd5\x64\x31\x9f\x3c\xb2\x7c\x6c\x88\xf5\x46\x07\xf3\x6a\x59\x56\x0a\x01\xeb\x1a\x05\x81\xaf\xe1\xde\xb7\x4e\x66\x55\xd0\x4d\x56\x69\x8b\xf0\x8e\x42\x07\x01\x8d\xe7\x52\xbb\xcd\x9b\xd3\x24\xb1\x2c\x7b\xa7\xac\x19\x7b\x1e\x66\x52\x23\xa7\x36\x60\x04\x0e\xa2\x8d\xe4\x2d\x88\xd0\x35\xe4\x21\x12\x17\x8f\x40\x8a\x13\xe8\xc4\xae\x0d\x42\x42\x31\xc1\x6b\xa3\xa3\x02\xe1\x9d\x4b\x95\xb5\x77\x11\xb4\x83\x22\x5b\xc0\x7d\x55\xc5\x39\x54\x37\x77\x67\xd5\xd7\x07\x68\x63\xcb\x8d\xe9\xc0\x21\xca\x08\xe7\xd9\xc5\xc4\xdf\xd6\x10\xbd\x45\x52\xc9\x15\x48\x8f\xd1\xbd\x25\x78\xf2\xe1\xf1\x3d\xfc\x48\x0e\xe0\x1f\xdb\xb0\x3a\x1d\xc6\xd0\x8c\xce\xfb\xe2\x53\x62\x8c\x42\x39\x4d\x90\x91\x2a\x1f\xb4\x6d\x0d\x27\x94\x7d\x95\x14\xb2\xda\x25\x0b\xb0\xf1\x25\x96\x32\xd8\x83\x5e\xee\x45\x17\xb0\x03\xa5\x55\xd8\x63\x41\x96\x53\xe3\x67\x5f\xaa\xea\x6e\x99\x76\xc9\x5d\x92\xe9\x3a\xf0\x94\x8a\x30\x3c\xc6\xeb\x59\x7f\x55\x66\x10\x83\xb8\x9e\x29\xa2\x26\xae\xf2\xfc\x67\xab\xc5\x5c\x18\xb4\xfd\x1d\x98\x6b\xbf\xba\x2a\x8a\x22\xa7\x34\xf1\x59\xc9\xf2\xf1\x78\x79\x18\xd9\xc5\x71\x64\xcf\x8f\x23\x7b\xf1\xba\xec\xab\x59\xf4\x77\xfb\x30\xd5\x2f\x87\xea\x59\x4f\x1d\xbc\xb3\x0f\x47\xd4\xbe\x3a\xa2\xf6\xc7\xff\x68\xef\x89\x65\x0b\xa5\xef\xf8\x0f\xb3\x7c\x7c\xca\xd2\xb3\x34\xbc\xd8\x7f\x02\x00\x00\xff\xff\x97\x5a\x72\x17\xb9\x05\x00\x00")

func htmlRttHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlRttHtml,
		"html/rtt.html",
	)
}

func htmlRttHtml() (*asset, error) {
	bytes, err := htmlRttHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/rtt.html", size: 1465, mode: os.FileMode(420), modTime: time.Unix(1463073257, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
	"html/rtt.html": htmlRttHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"rtt.html": &bintree{htmlRttHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
