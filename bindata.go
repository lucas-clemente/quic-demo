// Code generated by go-bindata.
// sources:
// html/index.html
// html/rtt.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x56\xdf\x8f\xdc\x34\x10\x7e\x4e\xfe\x8a\xd1\xf2\x02\xd2\x25\xbe\x5f\x6d\xaf\xc1\x17\xa9\x1c\x50\x90\xa8\x0a\xba\xad\xc4\x03\x12\xf2\xda\x93\xc4\x3a\xc7\x63\x6c\xe7\xee\x96\x8a\xff\x1d\x39\xde\x6c\x7b\xd7\x2d\x05\x5e\xfb\xb4\x9b\xf1\xcc\x37\xe3\xf9\xe6\x9b\x84\x0f\x71\x34\x6d\xc9\x07\x14\xaa\x2d\x01\x78\xd4\xd1\x60\xfb\xcb\x9b\x1f\xaf\xe0\x5b\x1c\x89\xb3\x6c\x48\x47\x21\x6e\xd3\xbf\xa2\xd8\x90\xda\xc2\xdb\xb2\x28\x8a\x8e\x6c\xac\x3a\x31\x6a\xb3\x6d\x20\x08\x1b\xaa\x80\x5e\x77\x5f\xa7\xb3\x51\xf8\x5e\xdb\x06\x4e\x70\x4c\xcf\x7f\x95\x65\x51\x48\x52\x98\x23\x95\x0e\xce\x88\x6d\x03\x1b\x43\xf2\xe6\x41\xc0\xe9\x3e\x00\x00\xa0\xfe\x63\xd2\xb2\x0a\x51\xc4\x29\x80\xd2\xb7\xf0\x76\x36\x03\x38\xa1\x94\xb6\xfd\x2e\x41\xb6\xcd\xf5\x04\xfd\x27\x36\x70\x52\x3f\x79\x67\x8f\x78\x1f\x2b\x61\x74\x6f\x1b\x90\x68\x23\xfa\x7c\xf2\x20\x07\x5a\xb1\x31\xa8\xf6\x09\x36\x42\xde\xf4\x9e\x26\xab\x2a\x49\x86\x7c\x03\x5f\xa8\xae\x3b\x56\x17\x0b\xea\x62\x3d\x93\xcf\x9e\x9e\xa9\x03\x88\x4a\x87\x4f\x42\x76\xa7\x0a\x15\x3e\x86\x14\xcf\xcf\xcf\xcf\x4f\x3f\x5e\x64\x9d\x1b\x52\x59\xda\x63\xef\x3b\x6a\xc9\xe2\x3f\x14\xb3\x84\x6e\x31\x7c\x22\x36\xf1\x4b\x11\x7d\x66\x2c\xd3\x53\x45\x72\xef\x51\x04\xc0\xd9\x6e\x2e\x38\xcb\x43\xc4\xd3\x78\xb4\x65\xc1\x87\x93\x77\x73\x04\x3f\x8b\x1e\x39\x1b\x4e\xda\x54\x12\x4f\x3c\x4a\x23\x42\xb8\x5c\xbd\x47\xef\xaa\x9d\x33\x7f\x70\xba\x10\xb3\x2b\x3c\x81\xfe\x7e\xbd\x7e\xb1\x7e\x73\xbd\x8b\x00\x98\x13\xe9\x00\x8b\x6b\xf3\x55\x86\x62\x4a\xdf\x7e\x04\x75\x4f\xce\xbf\x80\xdd\xfb\x36\x5f\x02\xdf\xf8\xe5\x98\x87\x51\x18\xd3\xae\xfd\x16\x3c\x1a\x12\x69\x1e\x81\x3c\x04\x44\xd0\x36\x44\x3f\xc9\xa8\xc9\x06\xd8\xa0\xa1\xbb\x9a\xb3\xec\xff\xb0\xb4\xdd\x9f\xb2\xe0\x2e\x89\x6b\x3d\xe8\x00\x77\xb8\x71\xa2\x47\x50\x38\x12\x06\x10\x16\xf0\xde\xa1\xd7\x23\xda\x28\x0c\x70\x01\x83\xc7\xee\x72\x35\xc4\xe8\x42\xc3\x58\xaf\xe3\x30\x6d\x6a\x49\x23\x33\x93\x14\xa1\x92\x06\x93\x2f\xb2\xf9\xaa\x3d\xad\xda\x97\x04\x7a\x74\xd9\xac\xc9\x72\x26\x5a\xa0\x0e\xe2\x80\x60\xe9\x16\x0f\x80\xa2\xad\xef\xf4\x8d\x76\xa8\xb4\xa8\xc9\xf7\x2c\x3d\xb1\xd4\x92\x55\x26\xd6\x79\x8a\x24\xc9\xcc\x58\xce\x93\xa3\x80\x0a\x36\x5b\x78\x49\xd4\x1b\xac\xcb\x82\xb3\x74\xa7\xdd\xc5\x08\xa2\xdf\x82\x8e\x40\x53\x3c\x82\x2d\x4d\x60\x11\x15\x44\x82\x29\x20\x08\x90\x93\xf7\x68\x23\x5c\x0d\x9e\x46\x84\x5b\xf4\x41\x93\x3d\x02\x61\x15\x18\x31\x59\x39\xa4\xe0\x3b\x1d\x07\x10\x10\x1c\x4a\x2d\x0c\x48\x1a\xc7\xe4\xd0\x79\x1a\xe7\xcb\x48\xb2\x81\x52\xf2\xd4\x59\x97\xc7\xcd\xe5\x96\x7f\x4f\x1e\x5e\x5f\xc3\xaf\x47\xa9\x90\xa6\x2c\x0a\x9e\xf6\x51\xaa\xad\x60\x2f\x9c\x33\x5a\x8a\x99\x2e\x96\xeb\xff\x6d\x57\x49\x2d\x9c\x63\x57\x64\x23\xda\x18\xd8\x2b\x21\x5f\x5f\x3f\xf2\x00\xa8\xaa\x29\xa0\xaf\x94\x88\xa2\x52\xda\x5f\xb2\x38\x3a\x26\xf3\x61\x55\x91\xd7\x59\x3a\x55\x47\x5e\x62\x35\x93\x42\xf6\x32\xfd\xd6\x0b\x55\xb5\xa6\xe6\xfc\xfc\xec\xe8\x03\xe3\xc5\xf1\xf1\x93\x83\xd6\xa7\x07\xad\xcf\x0e\x5a\x2f\x0e\x5a\x9f\x43\xb5\x53\xd7\x5c\x13\x2c\xd4\x3f\xf6\x4d\xbd\x62\xb9\x59\x65\x51\xa4\x3e\x1a\x6d\xa7\xfb\x03\x8d\xec\xe7\xc6\x54\xf2\xb3\xeb\x4b\xb1\x9f\xb6\xe1\xb4\xfd\x6e\xaf\xd6\xc0\xd9\x70\x9a\xed\xd3\xa2\x7c\xa3\xdb\xbd\xd8\x98\x8f\x71\xd5\xae\x07\x04\xec\x3a\x94\x31\x69\x32\xbf\x20\xa2\xd7\x2e\x24\x69\x71\x66\x74\x5e\x14\x09\xa1\x2c\x78\xde\xca\xa9\xdd\x7c\xf0\x2c\xfd\x7e\x33\x69\x13\x93\xf2\x7e\x4a\xea\x87\xab\x5d\x85\xb3\x74\x5e\x09\x1f\xd1\xc2\x35\xe2\x28\xac\x3d\x9a\x97\xd3\xff\x5a\x20\x3a\xfe\x30\x6d\x66\xad\x27\xd8\xa4\xb5\xff\x0a\x93\xd6\xd9\xaa\x0d\x34\x79\x89\x01\x3a\xf2\x10\xd3\xb6\x53\xf3\x87\x86\x68\xe7\x85\xb1\x5c\x8e\xb3\xfc\x1e\xe1\x2c\x7f\xa2\xfc\x1d\x00\x00\xff\xff\x34\x70\x28\x2a\xaa\x08\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2218, mode: os.FileMode(436), modTime: time.Unix(1464885735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlRttHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x6f\xeb\x36\x10\xbc\xe7\x57\x4c\x7d\x69\x83\x58\x96\x9c\x8f\x22\x55\x19\x5d\xd2\x43\x03\x14\x41\x9a\xa8\x3f\x80\x16\x57\x26\x1b\x89\x54\xb8\x2b\x38\xc6\xc3\xfb\xef\x0f\x92\xec\x20\x09\x12\xbc\x4b\x7c\x32\x3d\x63\xce\xee\x2c\xc9\xb1\xb2\xd2\x36\xc5\x91\xb2\xa4\x4d\x71\x04\x28\x71\xd2\x50\xf1\xef\x7f\x37\xd7\xf8\x8b\xda\xa0\xd2\x09\x18\x28\x96\xed\xb4\x02\x56\xc1\x6c\xf1\x6d\x5c\x02\x75\xf0\x92\xd4\xba\x75\xcd\x36\x07\x6b\xcf\x09\x53\x74\xf5\x9f\x3b\xba\xd5\x71\xed\x7c\x8e\x25\xb5\x13\xf4\xfd\x68\xfc\x58\x18\x6a\xc3\x8b\xc8\xc6\x19\xb1\x39\x96\x59\xd6\x3d\xef\x77\x5a\x72\x6b\x2b\xef\x40\xa1\x67\x49\x74\xe3\xd6\x3e\x47\x45\x5e\x28\xee\x99\x55\x88\x86\x62\x8e\x65\xf7\x0c\x0e\x8d\x33\x58\x47\xbd\xdd\xd7\x04\x54\xba\x73\xa0\xd2\xc9\xae\x1a\x6c\x8c\xd6\xec\x69\x51\x5a\x02\xd5\x35\x55\x82\x50\xe3\x3e\xf4\xde\x24\x65\x74\x5d\x52\xba\x96\xf0\x9b\xc4\x2d\x22\x35\x41\x1b\xe7\xd7\xbf\x1c\xab\xd4\x9e\x16\x83\x0f\xd5\x4d\x13\x19\x27\x56\x93\x96\x3e\x12\x43\xa3\xea\x59\x42\x8b\x2a\x6e\x3b\x09\x60\xd1\xd5\x23\xc4\x6a\x81\x63\xe8\x55\x43\x90\x00\x62\xd1\xab\xc6\xb1\x45\x15\xbc\xa7\x4a\x5c\xf0\x0c\xe7\x91\x25\x4b\xdc\x97\x25\x2f\x50\x5e\xdf\x9d\x94\xff\x3c\xa0\xe7\x5e\x37\xcd\x16\x9e\xc8\x30\xce\x92\xf3\x1d\x7f\x53\x83\x43\x4b\x62\x9d\x5f\xc3\x04\x62\xff\xab\x60\x13\xe2\xe3\x1c\xff\xf7\x2c\x78\xd3\x36\xf2\xe3\x71\x0c\xdd\xd4\xf9\x50\x7c\x77\x9e\x4a\x62\xb1\x9b\xa2\x12\x5b\x3c\xb8\xb6\x6f\xb4\x90\x19\xaa\xa8\x54\xec\x6b\x32\x43\xcb\xef\xb1\x65\xf6\x11\x7a\xf1\x21\xba\xc4\x2b\x48\xa5\xfb\xca\x6f\x5a\x30\xc5\xce\xf8\xc9\xdf\x65\x79\x77\xaa\x52\x31\xaf\x49\xe5\xea\xa8\x5b\x42\xd5\x68\xe6\xab\xd9\x70\x91\x66\xe0\x58\x5d\xcd\xac\x48\xc7\x79\x9a\x3e\xf5\xae\x5a\x54\x0d\xb5\xc3\x0d\x59\xb8\x90\x5f\x66\x59\x96\x0a\xb1\xcc\x0a\x95\x4e\xdb\x8b\xaf\x91\x5d\x1e\x46\xf6\xec\x30\xb2\xe7\x9f\xcb\x7e\x7a\x16\xc3\xdd\xfe\x9a\xea\x17\x63\xf5\x64\xa0\xbe\xdc\xd9\xef\x07\xd4\xbe\x3c\xa0\xf6\x1f\x3f\xd1\xde\x1f\x8b\x4a\x5f\x1e\xec\x3e\x74\x6e\x83\x50\x8e\xdb\x10\xdb\x21\x1c\xe6\x53\x08\x69\x6f\x30\xbe\x1a\x6c\x42\xdf\x18\x3c\x12\x75\x10\x4b\x2e\xbe\x89\x99\xd0\x91\x5f\xe0\xc6\x43\xac\x63\x0c\xbd\xce\xb1\x21\xb0\xed\x65\xf8\x75\x0b\x13\x36\x1e\xba\x16\x8a\xc3\x77\xd4\x2e\xb2\x20\xd2\x53\x4f\x2c\x73\x70\x98\xe2\x6c\x0a\x17\x1e\x33\x07\x7a\x48\x2f\x21\x6f\xc8\x2c\xf6\x49\xa3\xd2\x29\x65\x55\x3a\xfd\xd5\xfc\x08\x00\x00\xff\xff\x91\x70\xf0\xfe\x72\x06\x00\x00")

func htmlRttHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlRttHtml,
		"html/rtt.html",
	)
}

func htmlRttHtml() (*asset, error) {
	bytes, err := htmlRttHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/rtt.html", size: 1650, mode: os.FileMode(420), modTime: time.Unix(1463228757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
	"html/rtt.html": htmlRttHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"rtt.html": &bintree{htmlRttHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

