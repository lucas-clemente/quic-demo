// Code generated by go-bindata.
// sources:
// html/index.html
// html/rtt.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\xd1\x6f\xe4\xb4\x13\x7e\xef\x5f\x31\xda\xdf\xcb\x0f\xa9\x89\xdb\xed\xde\x5d\x09\x69\xa4\xa3\xc0\x81\xc4\xe9\x40\xbb\x27\xf1\x80\x84\x1c\x7b\x92\x58\x75\x3c\xc6\x76\xda\x2e\x88\xff\x1d\x39\x4e\x72\x7b\xdb\x2d\x1c\x3c\xf2\x14\x67\x3c\xfe\x3c\x33\xdf\x7c\x93\x94\x5d\xe8\x75\x75\x56\x76\xc8\x65\x75\x06\x50\x06\x15\x34\x56\x3f\xbe\xff\xee\x16\xbe\xc2\x9e\x4a\x96\x0c\x71\xcb\x87\x7d\x5a\x01\xd4\x24\xf7\xf0\xfb\xb8\x04\x68\xc8\x84\xac\xe1\xbd\xd2\xfb\x02\x3c\x37\x3e\xf3\xe8\x54\xf3\xc5\xb4\xdd\x73\xd7\x2a\x53\xc0\x25\xf6\xc9\xf4\xc7\xd9\xf8\x10\x24\x71\xc1\x90\xca\x5b\xcd\xf7\x05\xd4\x9a\xc4\xdd\xf1\xd1\xf5\xd1\xd1\xfc\xd7\x41\x89\xcc\x07\x1e\x06\x0f\x52\xdd\x2f\x30\x96\x4b\xa9\x4c\x7b\x70\xd9\x14\x9e\x57\xbf\x61\x01\x97\xf9\x8b\x0f\xf6\x80\x8f\x21\xe3\x5a\xb5\xa6\x00\x81\x26\xa0\x3b\x71\x07\x1a\x5e\x6b\x94\xcb\x05\x35\x17\x77\xad\xa3\xc1\xc8\x4c\x90\x26\x57\xc0\xff\x64\xd3\x5c\xc8\xeb\x19\x75\xb6\x5e\x89\x57\x2f\xaf\xe4\x09\x44\xa9\xfc\xdf\x42\x36\x6b\x89\x12\x8f\x21\xf9\xe7\x9b\xcd\x66\xfd\x7c\x90\x79\x2a\x48\x66\xe8\x69\x59\x0d\x19\xfc\x8b\x60\xe6\xa3\x7b\xf4\x9f\x70\xb6\x21\x0a\xe8\x16\xc7\xc4\x52\x16\xc8\x7e\xc4\x14\x40\xc9\xa6\x96\x29\x59\xea\xaf\x32\xf6\xcd\xd8\x4b\xdd\xe5\x87\x1e\x83\x1f\x78\x8b\x25\xeb\x2e\xab\x08\x5f\x46\x3e\x85\xe6\xde\xdf\xac\x0e\x68\x5e\xa5\xc6\x7b\xb2\x3b\x13\x34\x25\x10\x41\x7f\xd9\xee\x5e\xef\xde\x6f\xa7\x13\x00\xe3\x45\xca\xc3\xec\x5a\x7c\x96\xa0\x98\x54\xf7\xcf\xa0\x2e\x24\x7d\x02\xec\xe2\x5b\xfc\x1f\xca\xda\xcd\xdb\xa5\xef\xb9\xd6\xd5\xce\xed\xc1\xa1\x26\x1e\xfb\x12\xc8\x81\x47\x04\x65\x7c\x70\x83\x08\x8a\x8c\x87\x1a\x35\x3d\xe4\x25\x4b\xfe\x1f\x87\x36\x2d\xe2\xca\xa6\xad\x5d\xa7\x3c\x3c\x60\x6d\x79\x8b\x20\xb1\x27\xf4\xc0\x0d\xe0\xa3\x45\xa7\x7a\x34\x81\x6b\x28\x39\x74\x0e\x9b\x9b\x55\x17\x82\xf5\x05\x63\xad\x0a\xdd\x50\xe7\x82\x7a\xa6\x07\xc1\x7d\x26\x34\x46\x5f\x64\x63\xb6\x2d\xad\xaa\x37\x04\xaa\xb7\xc9\xac\xc8\x94\x8c\x57\x40\x0d\x84\x0e\xc1\xd0\x3d\x9e\x00\x45\x93\x3f\xa8\x3b\x65\x51\x2a\x9e\x93\x6b\x59\x7c\x63\xb1\x2a\xab\xc4\xad\x75\x14\x48\x90\x1e\xb1\xac\x23\x4b\x1e\x25\xd4\x7b\x78\x43\xd4\x6a\xcc\xc7\xfc\xc6\xb4\x96\xe4\x08\x82\xdb\x83\x0a\x40\x43\x38\x87\x3d\x0d\x60\x10\x25\x04\x82\xc1\x23\x70\x10\x83\x73\x68\x02\xdc\x76\x8e\x7a\x84\x7b\x74\x5e\x91\x39\x07\x6e\x24\x68\x3e\x18\xd1\xc5\xc3\x0f\x2a\x74\xc0\xc1\x5b\x14\x8a\x6b\x10\xd4\xf7\xd1\xa1\x71\xd4\x8f\x09\x09\x32\x9e\x0e\x02\x38\x88\xe0\x1b\x72\xf0\x6e\x0b\x3f\x9d\xc7\x40\x8a\x44\x46\x1c\x54\x33\xab\xec\xb5\xb5\x5a\x09\x3e\x52\xc7\x52\x22\x3f\x4f\xe1\xe4\xdc\x5a\x76\x4b\x26\xa0\x09\x9e\xbd\xe5\xe2\xdd\xf6\xc8\x03\x20\xcb\x06\x8f\x2e\x93\x3c\xf0\x4c\x2a\x77\xc3\x42\x6f\x99\x48\x9b\x59\x46\x4e\x25\x25\x65\x0d\x39\x81\xd9\xc8\x0e\x99\x9b\xf8\xcc\x67\xce\x72\x45\xc5\x66\x73\x75\xfe\xc4\x78\x7d\x71\xf1\xe2\xa4\xf5\xe5\x49\xeb\xab\x93\xd6\x6b\xc8\x26\x4d\x8d\xb7\xc3\xcc\xf6\xb1\xef\xd4\xa7\xa9\x36\x4b\xe9\xb4\x32\xc3\xe3\x73\xb5\x6b\xc7\x5a\x64\xe2\x3f\x5d\x8a\x83\x96\xea\xd6\xd5\xd7\x8b\x2c\x7d\xc9\xba\x75\xb2\x0f\xb3\xca\xb5\xaa\x16\x55\x31\x17\xc2\xaa\xda\x75\x08\xd8\x34\x28\x42\x14\x5f\xfa\x28\x04\xa7\xac\x8f\x1a\x2a\x99\x56\xe9\x82\x88\x10\x17\x69\x10\x4f\x68\x9d\x63\x69\xf5\xe5\xa0\x74\x88\x3a\xfb\x3e\x6a\x1d\x6e\xa7\x48\x47\x91\xbc\xe5\x2e\xa0\x81\x2d\x62\xcf\x8d\x39\x1f\xa7\xd1\xbf\x1a\x17\x2a\x7c\x3b\xd4\xa3\xb2\x23\x6c\x54\xd5\x3f\x85\x89\xc3\x6b\x55\x79\x1a\x9c\x40\x0f\x0d\x39\x08\x71\xb6\xc9\xf1\xaf\x83\x57\x49\x9d\x73\x86\x25\x4b\x9f\x8e\x92\xa5\x1f\x96\x3f\x03\x00\x00\xff\xff\x3a\x3f\xa1\xf9\xb8\x08\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2232, mode: os.FileMode(436), modTime: time.Unix(1465048279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlRttHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xc1\x6e\xeb\x36\x10\xbc\xe7\x2b\xa6\xbe\xb4\x41\x2c\x4b\x76\x9a\x36\x50\x19\x5d\xd2\x43\x03\x14\x41\x9a\xa8\x1f\x40\x8b\x2b\x93\x8d\x44\x2a\xdc\x15\x1c\xa3\x78\xff\xfe\x20\xc9\x0e\x92\x20\xc1\xbb\xc4\x27\xd3\x33\xe6\xec\xce\x92\x1c\x2b\x2b\x6d\x53\x9c\x28\x4b\xda\x14\x27\x80\x12\x27\x0d\x15\xff\xfc\x7b\x73\x8d\x3f\xa9\x0d\x2a\x9d\x80\x81\x62\xd9\x4d\x2b\x60\x1d\xcc\x0e\xff\x8f\x4b\xa0\x0e\x5e\x92\x5a\xb7\xae\xd9\xe5\x60\xed\x39\x61\x8a\xae\xfe\x63\x4f\xb7\x3a\x6e\x9c\xcf\xb1\xa4\x76\x82\xbe\x9d\x8c\x1f\x0b\x43\x6d\x78\x11\xd9\x3a\x23\x36\xc7\x32\xcb\xba\xe7\xc3\x4e\x4b\x6e\x63\xe5\x1d\x28\xf4\x2c\x89\x6e\xdc\xc6\xe7\xa8\xc8\x0b\xc5\x03\xb3\x0e\xd1\x50\xcc\xb1\xec\x9e\xc1\xa1\x71\x06\x9b\xa8\x77\x87\x9a\x80\x4a\xf7\x0e\x54\x3a\xd9\x55\x83\x8d\xd1\x9a\x5d\x15\xa5\x25\x50\x5d\x53\x25\x08\x35\xee\x43\xef\x4d\x52\x46\xd7\x25\xa5\x6b\x09\xbf\x48\xdc\x21\x52\x13\xb4\x71\x7e\xf3\xd3\xa9\x4a\xed\xaa\x18\x7c\xa8\x6e\x9a\xc8\x38\xb1\x9a\xb4\xf4\x91\x18\x1a\x55\xcf\x12\x5a\x54\x71\xd7\x49\x00\x8b\xae\x1e\x21\x56\x0b\x1c\x43\xaf\x1b\x82\x04\x10\x8b\x5e\x37\x8e\x2d\xaa\xe0\x3d\x55\xe2\x82\x67\x38\x8f\x2c\x59\xe2\xbe\x2c\x79\x81\xf2\xfa\xee\xac\xfc\xfb\x01\x3d\xf7\xba\x69\x76\xf0\x44\x86\x71\x9e\xfc\xba\xe7\x6f\x6a\x70\x68\x49\xac\xf3\x1b\x98\x40\xec\x7f\x16\x6c\x43\x7c\x9c\xe3\xbf\x9e\x05\x6f\xda\x46\x7e\x3a\x8e\xa1\x9b\x3a\x1f\x8a\xef\xcf\x53\x49\x2c\xf6\x53\x54\x62\x8b\x07\xd7\xf6\x8d\x16\x32\x43\x15\x95\x8a\x7d\x4d\x66\x68\xf9\x3d\xb6\xcc\x3e\x42\x2f\x3e\x44\x97\x78\x05\xa9\xf4\x50\xf9\x4d\x0b\xa6\xd8\x1b\x3f\xfb\xab\x2c\xef\x56\x2a\x15\xf3\x9a\x54\xae\x8e\xba\x25\x54\x8d\x66\xbe\x9a\x0d\x17\x69\x06\x8e\xd5\xd5\xcc\x8a\x74\x9c\xa7\xe9\x53\xef\xaa\x45\xd5\x50\x3b\xdc\x90\x85\x0b\xf9\x65\x96\x65\xa9\x10\xcb\xac\x50\xe9\xb4\xbd\xf8\x1a\xd9\xe5\x71\x64\x57\xc7\x91\x3d\xff\x5c\xf6\xd3\xb3\x18\xee\xf6\xd7\x54\xbf\x18\xab\x27\x03\xf5\xe5\xce\x7e\x3b\xa2\xf6\xef\x47\xd4\xbe\xfc\x81\xf6\xe1\x58\x54\xfa\xf2\x60\x0f\xa1\x73\x1b\x84\x72\xdc\x86\xd8\x0e\xe1\x30\x9f\x42\x48\x7b\x83\xf1\xd5\x60\x1b\xfa\xc6\xe0\x91\xa8\x83\x58\x72\xf1\x4d\xcc\x84\x8e\xfc\x02\x37\x1e\x62\x1d\x63\xe8\x75\x8e\x2d\x81\x6d\x2f\xc3\xaf\x5b\x98\xb0\xf5\xd0\xb5\x50\x1c\xbe\xa3\x76\x91\x05\x91\x9e\x7a\x62\x99\x83\xc3\x14\x67\x53\xb8\xf0\x98\x39\xd0\x43\x7a\x09\x79\x43\x66\x71\x48\x1a\x95\x4e\x29\xab\xd2\xe9\xaf\xe6\x7b\x00\x00\x00\xff\xff\x2e\x34\xf9\x1d\x72\x06\x00\x00")

func htmlRttHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlRttHtml,
		"html/rtt.html",
	)
}

func htmlRttHtml() (*asset, error) {
	bytes, err := htmlRttHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/rtt.html", size: 1650, mode: os.FileMode(420), modTime: time.Unix(1465048095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
	"html/rtt.html": htmlRttHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"rtt.html": &bintree{htmlRttHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

