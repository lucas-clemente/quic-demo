// Code generated by go-bindata.
// sources:
// html/index.html
// html/rtt.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x56\xdf\x8f\xdc\x34\x10\x7e\x4e\xfe\x8a\xd1\xf2\x02\xd2\x25\xbe\x5f\x6d\xaf\xc1\x17\xa9\x1c\x50\x90\xa8\x0a\xda\xab\xc4\x03\x12\xf2\xda\x93\xc4\x3a\xc7\x63\x6c\xe7\xee\x96\x8a\xff\x1d\x39\xce\x6e\x7b\xd7\x2d\x05\x5e\xfb\xb4\xc9\x67\xcf\xe7\xcf\xf3\xcd\xcc\x86\x0f\x71\x34\x6d\xc9\x07\x14\xaa\x2d\x01\x78\xd4\xd1\x60\xfb\xcb\x9b\x1f\xaf\xe0\x5b\x1c\x89\xb3\x0c\xa4\xa5\x10\xb7\xe9\xa9\x28\x36\xa4\xb6\xf0\xb6\x2c\x8a\xa2\x23\x1b\xab\x4e\x8c\xda\x6c\x1b\x08\xc2\x86\x2a\xa0\xd7\xdd\xd7\x69\x6d\x14\xbe\xd7\xb6\x81\x13\x1c\xd3\xfb\x5f\x65\x59\x14\x92\x14\xe6\x48\xa5\x83\x33\x62\xdb\xc0\xc6\x90\xbc\x79\x10\x70\xba\x0f\x00\x00\xa8\xff\x98\xb4\xac\x42\x14\x71\x0a\xa0\xf4\x2d\xbc\x9d\x61\x00\x27\x94\xd2\xb6\x5f\x0e\xc8\xd8\xac\x27\xe8\x3f\xb1\x81\x93\xfa\xc9\x3b\x3c\xe2\x7d\xac\x84\xd1\xbd\x6d\x40\xa2\x8d\xe8\xf3\xca\x83\x33\xd0\x8a\x8d\x41\xb5\x3f\x60\x23\xe4\x4d\xef\x69\xb2\xaa\x92\x64\xc8\x37\xf0\x85\xea\xba\x63\x75\xb1\x63\xdd\xa1\x67\xf2\xd9\xd3\x33\x75\x80\x51\xe9\xf0\x49\xca\xee\x54\xa1\xc2\xc7\x94\xe2\xf9\xf9\xf9\xf9\xe9\xc7\x45\xd6\x39\x21\x95\xa5\x3d\xf7\x3e\xa3\x96\x2c\xfe\x83\x98\x5d\xe8\x16\xc3\x27\x62\x93\xbf\x14\xd1\x67\xc7\xb2\x3d\x55\x24\xf7\x9e\x45\x00\x9c\x2d\x75\xc1\x59\x2e\x22\x9e\xca\xa3\x2d\x0b\x3e\x9c\xbc\xab\x23\xf8\x59\xf4\xc8\xd9\x70\xd2\x26\x49\x3c\xf9\x28\x8d\x08\xe1\x72\xf5\x9e\xbd\xab\x76\x3e\xf9\x83\xd5\x9d\x31\x8b\xf0\x44\xfa\xfb\xfa\xfa\xc5\xf5\x9b\xf5\x12\x01\x30\x1f\xa4\x03\xec\xb6\x36\x5f\x65\x2a\xa6\xf4\xed\x47\x58\xf7\xe6\xfc\x0b\xda\xfd\xde\xe6\xcb\x87\xbc\xcb\x43\x59\x70\x97\x3a\xe3\x7a\xd0\x01\xee\x70\xe3\x44\x8f\xa0\x70\x24\x0c\x20\x2c\xe0\xbd\x43\xaf\x47\xb4\x51\x18\xe0\x02\x06\x8f\xdd\xe5\x6a\x88\xd1\x85\x86\xb1\x5e\xc7\x61\xda\xd4\x92\x46\x66\x26\x29\x42\x25\x0d\xa6\xbd\xc8\x66\x9d\x3d\xad\xda\x97\x04\x7a\x74\x19\xd6\x64\x39\x13\x2d\x50\x07\x71\x40\xb0\x74\x8b\x07\x48\xd1\xd6\x77\xfa\x46\x3b\x54\x5a\xd4\xe4\x7b\x96\xde\x58\xba\xcf\x2a\xbb\xe2\x3c\x45\x92\x64\x66\x2e\xe7\xc9\x51\x40\x05\x9b\x2d\xbc\x24\xea\x0d\xd6\x65\xc1\x59\xba\xd3\x72\x31\x82\xe8\xb7\xa0\x23\xd0\x14\x8f\x60\x4b\x13\x58\x44\x05\x91\x60\x0a\x08\x02\xe4\xe4\x3d\xda\x08\x57\x83\xa7\x11\xe1\x16\x7d\xd0\x64\x8f\x40\x58\x05\x46\x4c\x56\x0e\x29\xf8\x4e\xc7\x01\x04\x04\x87\x52\x0b\x03\x92\xc6\x31\x6d\xe8\x3c\x8d\xf3\x65\x24\xd9\x40\xe9\xf0\x94\x59\x97\x6b\xc5\x65\x33\xbe\x27\x0f\xaf\xd7\xf0\xeb\x51\x12\xd2\x94\x45\xc1\xd3\x30\x49\xda\x0a\xf6\xc2\x39\xa3\xa5\x48\xa9\x09\x2c\xeb\xff\x6d\x51\x52\x0b\xe7\xd8\x15\xd9\x88\x36\x06\xf6\x4a\xc8\xd7\xeb\x47\x3b\x00\xaa\x6a\x0a\xe8\x2b\x25\xa2\xa8\x94\xf6\x97\x2c\x8e\x8e\xc9\xbc\x58\x55\xe4\x75\xae\xfb\xaa\x23\x2f\xb1\x9a\x4d\x21\x7b\x99\x7e\xeb\x9d\x55\xb5\xa6\xe6\xfc\xfc\xec\xe8\x03\xf0\xe2\xf8\xf8\xc9\x41\xf4\xe9\x41\xf4\xd9\x41\xf4\xe2\x20\xfa\x1c\xaa\xa5\x35\x66\x4d\xb0\xb3\xfe\xf1\xde\x94\x2b\x96\x93\x55\x16\x45\xca\xa3\xd1\x76\xba\x3f\x90\xc8\x7e\x4e\x4c\x25\x3f\xbb\xbc\x14\xfb\x6a\x1b\x4e\xdb\xef\xf6\xdd\x1a\x38\x1b\x4e\x33\x3e\x99\x65\x8c\x18\xdd\xee\x9b\x8d\xf9\x18\x57\xed\xf5\x80\x80\x5d\x87\x32\xa6\x9e\xcc\xd3\x3d\x7a\xed\x42\x6a\x2d\xce\x8c\xce\x83\x22\x31\x94\x05\xcf\x23\x35\xa5\x9b\x0f\x9e\xa5\xdf\x6f\x26\x6d\x62\xea\xbc\x9f\x52\xf7\xc3\xd5\xa2\x70\x6e\x9d\x57\xc2\x47\xb4\xb0\x46\x1c\x85\xb5\x47\x10\x10\xff\xdf\x00\xd1\xf1\x87\x69\x33\xf7\x7a\xa2\x4d\xbd\xf6\x5f\x69\xd2\x38\x5b\xb5\x81\x26\x2f\x31\x40\x47\x1e\x62\x9a\x76\x6a\xfe\x4a\x10\xed\x3c\x30\x76\x97\xe3\x2c\xff\x09\x70\x96\xbf\x2f\xfe\x0e\x00\x00\xff\xff\x69\x3a\xd2\x25\x67\x08\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2151, mode: os.FileMode(436), modTime: time.Unix(1464336173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlRttHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x6f\xeb\x36\x10\xbc\xe7\x57\x4c\x7d\x69\x83\x58\x96\x9c\x8f\x22\x55\x19\x5d\xd2\x43\x03\x14\x41\x9a\xa8\x3f\x80\x16\x57\x26\x1b\x89\x54\xb8\x2b\x38\xc6\xc3\xfb\xef\x0f\x92\xec\x20\x09\x12\xbc\x4b\x7c\x32\x3d\x63\xce\xee\x2c\xc9\xb1\xb2\xd2\x36\xc5\x91\xb2\xa4\x4d\x71\x04\x28\x71\xd2\x50\xf1\xef\x7f\x37\xd7\xf8\x8b\xda\xa0\xd2\x09\x18\x28\x96\xed\xb4\x02\x56\xc1\x6c\xf1\x6d\x5c\x02\x75\xf0\x92\xd4\xba\x75\xcd\x36\x07\x6b\xcf\x09\x53\x74\xf5\x9f\x3b\xba\xd5\x71\xed\x7c\x8e\x25\xb5\x13\xf4\xfd\x68\xfc\x58\x18\x6a\xc3\x8b\xc8\xc6\x19\xb1\x39\x96\x59\xd6\x3d\xef\x77\x5a\x72\x6b\x2b\xef\x40\xa1\x67\x49\x74\xe3\xd6\x3e\x47\x45\x5e\x28\xee\x99\x55\x88\x86\x62\x8e\x65\xf7\x0c\x0e\x8d\x33\x58\x47\xbd\xdd\xd7\x04\x54\xba\x73\xa0\xd2\xc9\xae\x1a\x6c\x8c\xd6\xec\x69\x51\x5a\x02\xd5\x35\x55\x82\x50\xe3\x3e\xf4\xde\x24\x65\x74\x5d\x52\xba\x96\xf0\x9b\xc4\x2d\x22\x35\x41\x1b\xe7\xd7\xbf\x1c\xab\xd4\x9e\x16\x83\x0f\xd5\x4d\x13\x19\x27\x56\x93\x96\x3e\x12\x43\xa3\xea\x59\x42\x8b\x2a\x6e\x3b\x09\x60\xd1\xd5\x23\xc4\x6a\x81\x63\xe8\x55\x43\x90\x00\x62\xd1\xab\xc6\xb1\x45\x15\xbc\xa7\x4a\x5c\xf0\x0c\xe7\x91\x25\x4b\xdc\x97\x25\x2f\x50\x5e\xdf\x9d\x94\xff\x3c\xa0\xe7\x5e\x37\xcd\x16\x9e\xc8\x30\xce\x92\xf3\x1d\x7f\x53\x83\x43\x4b\x62\x9d\x5f\xc3\x04\x62\xff\xab\x60\x13\xe2\xe3\x1c\xff\xf7\x2c\x78\xd3\x36\xf2\xe3\x71\x0c\xdd\xd4\xf9\x50\x7c\x77\x9e\x4a\x62\xb1\x9b\xa2\x12\x5b\x3c\xb8\xb6\x6f\xb4\x90\x19\xaa\xa8\x54\xec\x6b\x32\x43\xcb\xef\xb1\x65\xf6\x11\x7a\xf1\x21\xba\xc4\x2b\x48\xa5\xfb\xca\x6f\x5a\x30\xc5\xce\xf8\xc9\xdf\x65\x79\x77\xaa\x52\x31\xaf\x49\xe5\xea\xa8\x5b\x42\xd5\x68\xe6\xab\xd9\x70\x91\x66\xe0\x58\x5d\xcd\xac\x48\xc7\x79\x9a\x3e\xf5\xae\x5a\x54\x0d\xb5\xc3\x0d\x59\xb8\x90\x5f\x66\x59\x96\x0a\xb1\xcc\x0a\x95\x4e\xdb\x8b\xaf\x91\x5d\x1e\x46\xf6\xec\x30\xb2\xe7\x9f\xcb\x7e\x7a\x16\xc3\xdd\xfe\x9a\xea\x17\x63\xf5\x64\xa0\xbe\xdc\xd9\xef\x07\xd4\xbe\x3c\xa0\xf6\x1f\x3f\xd1\xde\x1f\x8b\x4a\x5f\x1e\xec\x3e\x74\x6e\x83\x50\x8e\xdb\x10\xdb\x21\x1c\xe6\x53\x08\x69\x6f\x30\xbe\x1a\x6c\x42\xdf\x18\x3c\x12\x75\x10\x4b\x2e\xbe\x89\x99\xd0\x91\x5f\xe0\xc6\x43\xac\x63\x0c\xbd\xce\xb1\x21\xb0\xed\x65\xf8\x75\x0b\x13\x36\x1e\xba\x16\x8a\xc3\x77\xd4\x2e\xb2\x20\xd2\x53\x4f\x2c\x73\x70\x98\xe2\x6c\x0a\x17\x1e\x33\x07\x7a\x48\x2f\x21\x6f\xc8\x2c\xf6\x49\xa3\xd2\x29\x65\x55\x3a\xfd\xd5\xfc\x08\x00\x00\xff\xff\x91\x70\xf0\xfe\x72\x06\x00\x00")

func htmlRttHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlRttHtml,
		"html/rtt.html",
	)
}

func htmlRttHtml() (*asset, error) {
	bytes, err := htmlRttHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/rtt.html", size: 1650, mode: os.FileMode(420), modTime: time.Unix(1463228757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
	"html/rtt.html": htmlRttHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"rtt.html": &bintree{htmlRttHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

